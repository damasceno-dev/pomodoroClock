<html>
    <div id="root"></div>
//I used on this codepen: typescript as processor, tailwind, webfont loader and the fcc test cdn as external scripts.

to use google fonts, I've imported the fonts on the .js file with the WebFont loader, and used the jsx style attribute to set the fonts for the individual elements. E. g.:

	WebFont.load({
		google: {
			families: ['Orbitron:400', 'Nova+Square:400']
		}
	});
...
style={{fontFamily: 'Nova Square'}}
</html>

<script>
    'use client'
import React, { useState, useRef } from "https://cdn.skypack.dev/react@17.0.1"
import ReactDOM from "https://cdn.skypack.dev/react-dom@17.0.1"

	WebFont.load({
		google: {
			families: ['Bricolage+Grotesque:800']
		}
	});

const app = document.getElementById('root');
ReactDOM.render(<Home/>, app);

export default function Home() {

  const [clock, setClock] = useState('25:00')
  const [session, setSession] = useState('25')
  const [breakLength, setBreakLenght] = useState(5)
  const [play, setPlay] = useState(false)
  const intervalId = useRef<ReturnType<typeof setInterval> | null>(null)
  const isPlaying = useRef(false)
  const isOnBreak = useRef(false)

  const audioRef = useRef<HTMLVideoElement>(null)

  // const audioFile= document.getElementById('beep') as HTMLVideoElement;
  let breakStyle = isOnBreak.current ? 'text-indigo-500' : '';
  const intervalTime = 100;

  function handleDecrementSession() {
    if(Number(session) === 1) return;
    setSession(session => {
      let next = (Number(session) - 1).toString()
      // return Number(next) < 10 ? '0' + next : next //commented for passing tests
      return next
    })
  }

  function handleIncreaseSession() {
    if(Number(session) === 60) return;
    setSession(session => {
      let next = (Number(session) + 1).toString()
      // return Number(next) < 10 ? '0' + next : next //commented for passing tests
      return next
    })
  }
  function handleDecrementBreak() {
    if(breakLength === 1) return;
    setBreakLenght(prev => prev -1)
  }
  function handleIncreaseBreak() {
    if(breakLength===60) return;
    setBreakLenght(prev => prev + 1)
  }

  function handleReset() {
    isPlaying.current = false;
    isOnBreak.current = false;
    setPlay(false);
    // setClock(session.toString() + ':00') comented for passing tests
    // reset should set clock to the last session state, but tests want to set it always to 25
    setSession('25')
    setBreakLenght(5)
    clearInterval(Number(intervalId.current))
    intervalId.current = null;
    // audioFile.pause()
    // audioFile.currentTime = 0;
    if (audioRef.current != undefined) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }
  }

  function handlePlayPause() { 
    isPlaying.current = !isPlaying.current

    if (!play) {
      setClock(prev => {
        return Number(prev) < 10 ? '0' + session + ':00' : session + ':00'
      })
      setPlay(true)
    }

    if (isPlaying.current) {
      intervalId.current = setInterval(() => {

        setClock(prev => {
          let [minutes, seconds] = getTime(prev);

          if (minutes === '00' && seconds === '00') {
            if (!isOnBreak.current) {
              isOnBreak.current = true;
              // audioFile.play()
              audioRef.current?.play();
              return breakLength > 9 ? breakLength.toString() + ':00' : '0' + breakLength.toString() + ':00'
            } else {
              isOnBreak.current = false;
              return Number(session) < 10 ? '0' + session + ':00' : session + ':00'
            }
          }

          if (seconds === '00') { 
            seconds = '59';
            minutes = (Number(minutes) - 1).toString()
          } else { 
            seconds = (Number(seconds) -1).toString() 
          }
          if(Number(seconds) < 10) { 
            seconds = '0' + seconds;
          }
          if(Number(minutes) < 10) {
            minutes = '0' + Number(minutes);    
          }
          return minutes + ':' + seconds
        })
      }, intervalTime)
    } else {
      clearInterval(Number(intervalId.current))
    }
  }

  function getTime(clock:string) : Array<string> {
    let minutes = clock.substring(0, clock.indexOf(':'))
    let seconds = clock.substring(clock.indexOf(':') + 1, clock.length)
    
    return [minutes, seconds]
  }

  return (
    <main style={{fontFamily: 'Bricolage Grotesque'}} className={`bg-black text-white h-screen flex flex-col items-center`}>
      <h1 className='text-2xl mt-20'>Pomodoro clock</h1>
        <div className='flex justify-evenly w-full mt-16' id='menu'>
          <div className='flex flex-col items-center' id='session-wrapper'>
            <div id="session-label">session</div>
            <div id="clock-and-buttons" className='flex gap-10'>
              <button disabled={play} id='session-decrement' onClick={handleDecrementSession} className='text-3xl p-5 disabled:text-gray-600'>-</button>
              <div id="session-length" className='text-5xl py-5 mr-2 w-10'>{session}</div>
              <button disabled={play} id='session-increment' onClick={handleIncreaseSession} className='text-3xl p-5 disabled:text-gray-600'>+</button>
            </div>
          </div>
          <div className='flex flex-col items-center' id='break-wrapper'>
            <div id="break-label">break</div>
            <div id="break-and-buttons" className='flex gap-10'>
              <button disabled={play} id='break-decrement' onClick={handleDecrementBreak} className='text-3xl p-5 disabled:text-gray-600'>-</button>
              <div id="break-length" className='text-5xl py-5 w-10'>{breakLength}</div>
              <button disabled={play} id='break-increment' onClick={handleIncreaseBreak} className='text-3xl p-5 disabled:text-gray-600'>+</button>
            </div>
          </div>
        </div>
        <div className={`flex flex-col items-center ${breakStyle}`} id='break-wrapper'>
            <div id="timer-label" >{isOnBreak.current ? 'break' : 'clock'}</div>
            <div id="time-left" className='text-8xl'>
              {play ? clock : 
              Number(session) < 10 ? '0' + session + ':00' : session + ':00'}
            </div>
        </div>
        <div className='flex gap-10 mt-2' id="controls">
          <button id="start_stop" onClick={handlePlayPause}>play/pause</button>
          <button  id="reset" onClick={handleReset}>reset</button>
          <audio ref={audioRef} src='https://cdn.freesound.org/previews/86/86991_1326056-lq.mp3' id='beep'/>
        </div>
    </main>
  )
}
</script>